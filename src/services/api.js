// –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏/–ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const IS_DEV = import.meta.env.DEV;
// –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
const DEBUG_MODE = true;

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ Vite
// –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
const BASE_API_URL = '';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ—Ç–ª–∞–¥–∫–∏ –æ—Ç–≤–µ—Ç–∞
const debugResponse = async (response, url) => {
  if (!DEBUG_MODE) return;
  
  console.group(`üì° –û—Ç–≤–µ—Ç –æ—Ç API (${url})`);
  console.log('–°—Ç–∞—Ç—É—Å:', response.status);
  console.log('–í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', Object.fromEntries([...response.headers.entries()]));
  console.groupEnd();
};

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
const fetchData = async (url, options = {}) => {
  try {
    const headers = {
      'Content-Type': 'application/json',
      ...options.headers
    };
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    const fetchOptions = {
      ...options,
      headers
    };
    
    if (DEBUG_MODE) {
      console.group(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞`);
      console.log('URL:', url);
      console.log('–ú–µ—Ç–æ–¥:', options.method || 'GET');
      if (options.body) {
        console.log('–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.parse(options.body));
      }
      console.groupEnd();
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(url, fetchOptions);
    
    if (DEBUG_MODE) {
      await debugResponse(response, url);
    }
    
    if (!response.ok) {
      const errorText = await response.text();
      console.error(`HTTP –æ—à–∏–±–∫–∞ ${response.status}: ${errorText}`);
      throw new Error(`HTTP Error: ${response.status}`);
    }
    
    if (response.status === 204) {
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const contentType = response.headers.get('Content-Type');
    if (contentType && contentType.includes('application/json')) {
      const data = await response.json();
      if (DEBUG_MODE) {
        console.log('–û—Ç–≤–µ—Ç:', data);
      }
      return data;
    } else {
      const text = await response.text();
      if (DEBUG_MODE) {
        console.log('–û—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç):', text);
      }
      return text;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
export const postsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã - –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ Supabase
  getPosts: () => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ postService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Supabase –Ω–∞–ø—Ä—è–º—É—é
    console.warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.getPosts() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    return { message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.getPosts() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞' };
  },
  
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç
  getPost: (postId) => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ postService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Supabase –Ω–∞–ø—Ä—è–º—É—é
    console.warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.getPostById() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    return { message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.getPostById() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞' };
  },
  
  // –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
  searchPosts: (query) => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ postService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Supabase –Ω–∞–ø—Ä—è–º—É—é
    console.warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.searchPosts() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    return { message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ postService.searchPosts() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞' };
  }
};

// API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
export const commentsApi = {
  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞
  getComments: (postId) => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ commentService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Supabase –Ω–∞–ø—Ä—è–º—É—é
    console.warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ commentService.getCommentsByPostId() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    return { message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ commentService.getCommentsByPostId() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞' };
  },
  
  // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
  addComment: (commentData) => {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑ commentService, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Supabase –Ω–∞–ø—Ä—è–º—É—é
    console.warn('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ commentService.createComment() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞');
    return { message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ commentService.createComment() –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞' };
  }
};

export default {
  postsApi,
  commentsApi
};